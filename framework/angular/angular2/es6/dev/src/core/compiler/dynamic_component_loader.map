{"version":3,"sources":["dynamic_component_loader.js"],"names":[],"mappings":"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","file":"angular2/src/core/compiler/dynamic_component_loader.es6","sourcesContent":["import {Key, Injector, Injectable, ResolvedBinding} from 'angular2/di'\nimport {Compiler} from './compiler';\nimport {DirectiveMetadataReader} from './directive_metadata_reader';\nimport {Type, BaseException, stringify, isPresent} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {Component} from 'angular2/src/core/annotations/annotations';\nimport {ViewFactory} from 'angular2/src/core/compiler/view_factory';\nimport {AppViewHydrator} from 'angular2/src/core/compiler/view_hydrator';\nimport {ElementRef, DirectiveBinding} from './element_injector';\nimport {AppView} from './view';\n\n/**\n * @exportedAs angular2/view\n */\nexport class ComponentRef {\n  location:ElementRef;\n  instance:any;\n  componentView:AppView;\n  _dispose:Function;\n\n  constructor(location:ElementRef, instance:any, componentView:AppView, dispose:Function){\n    this.location = location;\n    this.instance = instance;\n    this.componentView = componentView;\n    this._dispose = dispose;\n  }\n\n  get injector() {\n    return this.location.injector;\n  }\n\n  get hostView() {\n    return this.location.hostView;\n  }\n\n  dispose() {\n    this._dispose();\n  }\n}\n\n/**\n * Service for dynamically loading a Component into an arbitrary position in the internal Angular\n * application tree.\n *\n * @exportedAs angular2/view\n */\n@Injectable()\nexport class DynamicComponentLoader {\n  _compiler:Compiler;\n  _viewFactory:ViewFactory;\n  _viewHydrator:AppViewHydrator;\n  _directiveMetadataReader:DirectiveMetadataReader;\n\n  constructor(compiler:Compiler, directiveMetadataReader:DirectiveMetadataReader,\n              viewFactory:ViewFactory, viewHydrator:AppViewHydrator) {\n    this._compiler = compiler;\n    this._directiveMetadataReader = directiveMetadataReader;\n    this._viewFactory = viewFactory;\n    this._viewHydrator = viewHydrator;\n  }\n\n  /**\n   * Loads a component into the location given by the provided ElementRef. The loaded component\n   * receives injection as if it in the place of the provided ElementRef.\n   */\n  loadIntoExistingLocation(type:Type, location:ElementRef, injector:Injector = null):Promise<ComponentRef> {\n    this._assertTypeIsComponent(type);\n    var annotation = this._directiveMetadataReader.read(type).annotation;\n    var componentBinding = DirectiveBinding.createFromType(type, annotation);\n\n    return this._compiler.compile(type).then(componentProtoView => {\n      var componentView = this._viewFactory.getView(componentProtoView);\n      this._viewHydrator.hydrateDynamicComponentView(\n        location, componentView, componentBinding, injector);\n\n      var dispose = () => {throw new BaseException(\"Not implemented\");};\n      return new ComponentRef(location, location.elementInjector.getDynamicallyLoadedComponent(), componentView, dispose);\n    });\n  }\n\n  /**\n   * Loads a component in the element specified by elementOrSelector. The loaded component receives\n   * injection normally as a hosted view.\n   */\n  loadIntoNewLocation(type:Type, parentComponentLocation:ElementRef, elementOrSelector:any,\n                      injector:Injector = null):Promise<ComponentRef> {\n    this._assertTypeIsComponent(type);\n\n    return  this._compiler.compileInHost(type).then(hostProtoView => {\n      var hostView = this._viewFactory.getView(hostProtoView);\n      this._viewHydrator.hydrateInPlaceHostView(\n        parentComponentLocation, elementOrSelector, hostView, injector\n      );\n\n      var newLocation = hostView.elementInjectors[0].getElementRef();\n      var component = hostView.elementInjectors[0].getComponent();\n      var dispose = () => {\n        this._viewHydrator.dehydrateInPlaceHostView(parentComponentLocation, hostView);\n        this._viewFactory.returnView(hostView);\n      };\n      return new ComponentRef(newLocation, component, hostView.componentChildViews[0], dispose);\n    });\n  }\n\n  /**\n   * Loads a component next to the provided ElementRef. The loaded component receives\n   * injection normally as a hosted view.\n   */\n  loadNextToExistingLocation(type:Type, location:ElementRef, injector:Injector = null):Promise<ComponentRef> {\n    this._assertTypeIsComponent(type);\n\n    return this._compiler.compileInHost(type).then(hostProtoView => {\n      var hostView = location.viewContainer.create(-1, hostProtoView, injector);\n\n      var newLocation = hostView.elementInjectors[0].getElementRef();\n      var component = hostView.elementInjectors[0].getComponent();\n      var dispose = () => {\n        var index = location.viewContainer.indexOf(hostView);\n        location.viewContainer.remove(index);\n      };\n      return new ComponentRef(newLocation, component, hostView.componentChildViews[0], dispose);\n    });\n  }\n\n  /** Asserts that the type being dynamically instantiated is a Component. */\n  _assertTypeIsComponent(type:Type) {\n    var annotation = this._directiveMetadataReader.read(type).annotation;\n    if (!(annotation instanceof Component)) {\n      throw new BaseException(`Could not load '${stringify(type)}' because it is not a component.`);\n    }\n  }\n}\n"]}